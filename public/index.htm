<!doctype html>
<html>
	<head>
		<title>Logger</title>
		<!--<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/fetch/3.0.0/fetch.min.js"></script>-->
		<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.4.1/jquery.min.js"></script>
		<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/vue/2.6.10/vue.min.js"></script>
		<!--<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Sortable/1.9.0/Sortable.min.js"></script>-->
		<!--<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/Vue.Draggable/2.23.0/vuedraggable.umd.min.js"></script>-->
		<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/three.js/108/three.min.js"></script>
		<script type="text/javascript" src="https://www.vantajs.com/dist/vanta.waves.min.js"></script>
		<script type="text/javascript">

			window.queryString = Object.fromEntries(document.location.search.replace(/^\?/, "").split("&").map(o=>o.split("=").map(o=>decodeURIComponent(o))));
			$(()=>
			{
				// Configure App
				window.app = new Vue(
				{
					el: '#app',
					mounted()
					{
						this.Reload();
					},
					data:
					{
						logData: [],
						key: queryString.key || "",
						text: ""
					},
					computed:
					{
						queryString()
						{
							var qs = [];
							if (this.key) qs.push("key=" + encodeURIComponent(this.key));
							if (this.text != "") qs.push("msg=" + encodeURIComponent(this.text));
							return qs.length > 0 ? "?" + qs.join("&") : "";
						}
					},
					methods:
					{
						Reload()
						{
							this.text = "";
							this.logData = [];
							fetch("/api/log" + this.queryString)
							.then(o=>o.json())
							.then(o =>
							{
								this.logData = o;
							})
							.catch(console.error);
							return this;
						},
						Write()
						{
							fetch("/api/write" + this.queryString)
							.then(o=>o.json())
							.then(o =>
							{
								this.text = "";
								this.logData.unshift(o);
								while (this.logData.length>1000) this.logData.pop();
							})
							.catch(console.error);
							return this;
						},
						Delete()
						{
							if (!confirm("Delete all log data pertaining to key: " + this.key + "?")) return;
							fetch("/api/delete" + this.queryString)
							.then(o=>o.json())
							.then(o =>
							{
								document.location.search = "";
							})
							.catch(console.error);
							return this;
						}
					},
					components:
					{
						editable:
						{
							props: ['value', 'mode'],
							mounted()
							{
								if (this.mode == "html") this.$el.innerHTML = this.value;
								else this.$el.innerText = this.value;
							},
							methods:
							{
								update(e)
								{
									this.$emit('input', this.mode == "html" ? e.target.innerHTML : e.target.innerText);
								}
							},
							template: `<div contenteditable="true" @input="update"></div>`
						}
					}
				});
				VANTA.WAVES({el: "#app", color: 0x0});
				$("#app").css({display: ""});
				
			});
		
		</script>
		<style type="text/css">

			body
			{
				background-color: #000;
			}

			#app
			{
				position: fixed;
				top: 0px;
				bottom: 0px;
				right: 0px;
				left: 0px;
			}
			
			#txtInput
			{
				background-color: #fff;
				border: 1px solid #000;
				border-radius: 4px;
				box-shadow: 4px 4px 16px rgba(0,0,0,0.25);
				color: #000;
				min-height: 18px;
				max-height: 54px;
				overflow-y: auto;
				padding: 2px;
				width: 400px;
			}

			#divLog
			{
				bottom: 0px;
				left: 0px;
				overflow-y: scroll;
				position: fixed;
				right: 0px;
				top: 80px;
			}

			#divLog>table
			{
				border-collapse: collapse;
				width: 100%;
			}

			#divLog>table>thead>tr>th
			{
				border: 1px solid #444;
				background-color: #444;
				background-image: linear-gradient(0deg, #222, #666);
				color: #fff;
				vertical-align: top;
			}
			
			#divLog>table>tbody>tr>td
			{
				border: 1px solid #444;
				background-color: rgba(255,255,255,0.75);
				color: #000;
				vertical-align: top;
			}

			#divLog>table>tbody>tr>td:first-child
			{
				white-space: nowrap;
			}

			#divLog>table>tbody>tr>td:last-child
			{
				width: 100%;
			}

			#divLog>table>tbody>tr>td:last-child>pre
			{
				margin: 0px;
			}

			div.textSubmit
			{
				border: 1px solid rgba(255,255,255,0.5);
				border-radius: 4px;
				display: flex;
				flex-wrap: nowrap;
				width: fit-content;
				margin: 4px;
				padding: 2px;
			}

			div.textSubmit>button
			{
				background-color: #444;
				border: 1px solid #000;
				border-radius: 4px;
				box-shadow: inset 0px 0px 4px rgb(0,0,0);
				color: #fff;
				font-weight: bold;
			}

			div.textSubmit>button:active
			{
				background-color: #44A;
				border: 1px solid #ff0;
				color: #ff0;
			}
			
		</style>
	</head>
	<body>
		<div id="app" style="display:none;">

			<div class="textSubmit">
				<editable id="txtInput" v-model="text"></editable>
				<button @click="Write">Write</button>
			</div>
			
			<a href="https://github.com/Blitzsturm/logger" target="_blank" style="position:fixed;top:0px;right:0px;font-size:12px;color:#fff;">https://github.com/Blitzsturm/logger</a>

			<div id="divLog">
				<table v-if="logData.length>0">
					<thead>
						<tr>
							<th>Time</th>
							<th>Data</th>
						</tr>
					</thead>
					<tbody>
						<tr v-for="row in logData">
							<td>{{JSON.stringify(new Date(row.time)).replace(/"|Z/g,"").replace(/T/g," ")}}</td>
							<td>
								<pre>{{row.data}}</pre>
							</td>
						</tr>
					</tbody>
				</table>
			</div>
			
		</div>
	</body>
</html>
